import streamlit as st
import sys
import os
import shutil

# Th√™m ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i v√†o sys.path ƒë·ªÉ import ƒë∆∞·ª£c c√°c module local
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from llm_rag import qa_chain, create_qa_chain
    from pre_doc import (
        get_available_documents,
        process_single_document,
        get_default_vector_store,
        process_all_documents,
        DOCUMENTS_DIR
    )
except ImportError as e:
    st.error(f"L·ªói import: {e}")
    st.stop()

st.set_page_config(
    page_title="Chatbot RAG Multi-Document",
    page_icon="ü§ñ",
    layout="wide"
)

st.title("ü§ñ Chatbot RAG Multi-Document")
st.markdown("---")

# Sidebar ƒë·ªÉ ch·ªçn model v√† qu·∫£n l√Ω t√†i li·ªáu
with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh System")

    # Tab ƒë·ªÉ ch·ªçn gi·ªØa c·∫•u h√¨nh v√† qu·∫£n l√Ω file
    tab1, tab2 = st.tabs(["üîß Model", "üìö T√†i li·ªáu"])
    
    with tab1:
        model_choice = st.selectbox(
            "Ch·ªçn AI Model:",
            ["gemini", "openai"],
            index=0,
            help="OpenAI GPT ho·∫∑c Google Gemini"
        )

        if model_choice == "openai":
            st.info("ü§ñ OpenAI GPT - Ch·∫•t l∆∞·ª£ng cao")
            st.caption("üí∞ Chi ph√≠: ~$0.002/1000 tokens")
        else:
            st.info("ü§ñ Google Gemini - Hi·ªáu su·∫•t t·ªët")
            st.caption("üí∞ Chi ph√≠: Mi·ªÖn ph√≠ v·ªõi quota gi·ªõi h·∫°n")

        st.markdown("---")
        st.markdown("**üìä API Status:**")

        # Ki·ªÉm tra API keys
        import os
        from dotenv import load_dotenv
        load_dotenv('config.env')

        openai_key = os.getenv('OPENAI_API_KEY')
        gemini_key = os.getenv('GEMINI_API_KEY')

        if openai_key and openai_key != 'your_openai_api_key_here':
            st.success("‚úÖ OpenAI API Key OK")
        else:
            st.error("‚ùå OpenAI API Key Missing")

        if gemini_key and gemini_key != 'your_gemini_api_key_here':
            st.success("‚úÖ Gemini API Key OK")
        else:
            st.error("‚ùå Gemini API Key Missing")
    
    with tab2:
        st.subheader("üìÇ Qu·∫£n l√Ω T√†i li·ªáu")
        
        # Upload file m·ªõi
        uploaded_file = st.file_uploader(
            "üì§ Upload PDF m·ªõi:",
            type=['pdf'],
            help="Ch·ªçn file PDF ƒë·ªÉ th√™m v√†o h·ªá th·ªëng"
        )
        
        if uploaded_file is not None:
            # T·∫°o th∆∞ m·ª•c documents n·∫øu ch∆∞a c√≥
            os.makedirs(DOCUMENTS_DIR, exist_ok=True)
            
            # L∆∞u file
            file_path = os.path.join(DOCUMENTS_DIR, uploaded_file.name)
            
            # Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i ch∆∞a
            if os.path.exists(file_path):
                st.warning(f"‚ö†Ô∏è File '{uploaded_file.name}' ƒë√£ t·ªìn t·∫°i!")
                if st.button("üîÑ Ghi ƒë√® file", key="overwrite"):
                    with open(file_path, "wb") as f:
                        f.write(uploaded_file.getvalue())
                    st.success(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t '{uploaded_file.name}'")
                    st.rerun()
            else:
                with open(file_path, "wb") as f:
                    f.write(uploaded_file.getvalue())
                st.success(f"‚úÖ ƒê√£ upload '{uploaded_file.name}'")
                
                # T·ª± ƒë·ªông x·ª≠ l√Ω file m·ªõi
                with st.spinner("üîÑ ƒêang x·ª≠ l√Ω file m·ªõi..."):
                    try:
                        vector_store = process_single_document(file_path)
                        if vector_store:
                            st.success("‚úÖ ƒê√£ t·∫°o vector store cho file m·ªõi!")
                            st.rerun()
                        else:
                            st.error("‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω file!")
                    except Exception as e:
                        st.error(f"‚ùå L·ªói x·ª≠ l√Ω file: {e}")

        st.markdown("---")
        
        # Hi·ªÉn th·ªã danh s√°ch file hi·ªán c√≥
        st.subheader("üìã T√†i li·ªáu c√≥ s·∫µn")
        
        documents = get_available_documents()
        if documents:
            for doc in documents:
                with st.expander(f"üìÑ {doc['filename']} ({doc['size_mb']} MB)"):
                    st.write(f"**Hash:** {doc['hash']}")
                    st.write(f"**Vector Store:** {'‚úÖ S·∫µn s√†ng' if doc['has_vector_store'] else '‚ùå Ch∆∞a x·ª≠ l√Ω'}")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if not doc['has_vector_store']:
                            if st.button(f"üîÑ X·ª≠ l√Ω", key=f"process_{doc['hash']}"):
                                with st.spinner("üîÑ ƒêang x·ª≠ l√Ω..."):
                                    try:
                                        vector_store = process_single_document(doc['path'])
                                        if vector_store:
                                            st.success("‚úÖ ƒê√£ x·ª≠ l√Ω!")
                                            st.rerun()
                                        else:
                                            st.error("‚ùå L·ªói x·ª≠ l√Ω!")
                                    except Exception as e:
                                        st.error(f"‚ùå L·ªói: {e}")
                    
                    with col2:
                        if st.button(f"üóëÔ∏è X√≥a", key=f"delete_{doc['hash']}"):
                            try:
                                # X√≥a file PDF
                                if os.path.exists(doc['path']):
                                    os.remove(doc['path'])
                                
                                # X√≥a vector store
                                if os.path.exists(doc['vector_store_path']):
                                    shutil.rmtree(doc['vector_store_path'])
                                
                                st.success(f"‚úÖ ƒê√£ x√≥a '{doc['filename']}'")
                                st.rerun()
                            except Exception as e:
                                st.error(f"‚ùå L·ªói x√≥a file: {e}")
            
            # Button ƒë·ªÉ rebuild to√†n b·ªô h·ªá th·ªëng
            st.markdown("---")
            if st.button("üîÑ Rebuild to√†n b·ªô Vector Store", key="rebuild_all"):
                with st.spinner("üîÑ ƒêang rebuild to√†n b·ªô h·ªá th·ªëng..."):
                    try:
                        combined_store = process_all_documents()
                        if combined_store:
                            st.success("‚úÖ ƒê√£ rebuild to√†n b·ªô h·ªá th·ªëng!")
                            # Reset qa_chain ƒë·ªÉ d√πng vector store m·ªõi
                            if 'current_model' in st.session_state:
                                del st.session_state.current_model
                        else:
                            st.error("‚ùå Kh√¥ng th·ªÉ rebuild h·ªá th·ªëng!")
                    except Exception as e:
                        st.error(f"‚ùå L·ªói rebuild: {e}")
        else:
            st.info("üì≠ Ch∆∞a c√≥ t√†i li·ªáu n√†o. H√£y upload file PDF!")
        
        # Hi·ªÉn th·ªã t·ªïng s·ªë t√†i li·ªáu
        processed_count = len([d for d in documents if d['has_vector_store']])
        st.markdown(f"**üìä T·ªïng quan:** {len(documents)} file, {processed_count} ƒë√£ x·ª≠ l√Ω")

# Main interface
st.subheader("ü§ñ Tra c·ª©u Th√¥ng tin")

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ t√†i li·ªáu ƒëang s·ª≠ d·ª•ng
documents = get_available_documents()
processed_docs = [d for d in documents if d['has_vector_store']]

if processed_docs:
    doc_names = [d['filename'] for d in processed_docs]
    if len(doc_names) == 1:
        st.info(f"üìñ ƒêang s·ª≠ d·ª•ng: **{doc_names[0]}**")
    else:
        st.info(f"üìö ƒêang s·ª≠ d·ª•ng: **{len(doc_names)} t√†i li·ªáu** ({', '.join(doc_names[:3])}{'...' if len(doc_names) > 3 else ''})")
else:
    st.warning("‚ö†Ô∏è Ch∆∞a c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c x·ª≠ l√Ω. H√£y upload v√† x·ª≠ l√Ω file PDF trong sidebar!")
    st.stop()

col1, col2 = st.columns([2, 1])

with col1:
    query = st.text_input(
        "üí¨ Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:",
        placeholder="VD: T√†i li·ªáu n√≥i v·ªÅ g√¨?",
        help="H√£y ƒë·∫∑t c√¢u h·ªèi li√™n quan ƒë·∫øn n·ªôi dung t√†i li·ªáu PDF"
    )

with col2:
    search_button = st.button("üîç T√¨m ki·∫øm", type="primary")

if query and (search_button or st.session_state.get('auto_search', True)):
    try:
        # T·∫°o l·∫°i qa_chain n·∫øu ng∆∞·ªùi d√πng thay ƒë·ªïi model
        if 'current_model' not in st.session_state or st.session_state.current_model != model_choice:
            with st.spinner("ƒêang kh·ªüi t·∫°o model..."):
                qa_chain = create_qa_chain(model_choice)
                st.session_state.current_model = model_choice

        # Th·ª±c hi·ªán truy v·∫•n
        with st.spinner("ƒêang t√¨m ki·∫øm th√¥ng tin..."):
            if hasattr(qa_chain, 'invoke'):
                result = qa_chain.invoke({"query": query})
                response = result.get(
                    'result', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.')
                source_docs = result.get('source_documents', [])
            else:
                # Fallback cho phi√™n b·∫£n c≈©
                response = qa_chain.run(query)
                source_docs = []

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.markdown("### üí° **C√¢u tr·∫£ l·ªùi:**")
        st.success(response)

        # Hi·ªÉn th·ªã ngu·ªìn tham kh·∫£o n·∫øu c√≥
        if source_docs:
            with st.expander("üìö Ngu·ªìn tham kh·∫£o"):
                # Nh√≥m theo file ngu·ªìn
                sources_by_file = {}
                for doc in source_docs[:10]:
                    source_file = doc.metadata.get('source_file', 'Unknown')
                    if source_file not in sources_by_file:
                        sources_by_file[source_file] = []
                    sources_by_file[source_file].append(doc)
                
                # Hi·ªÉn th·ªã theo t·ª´ng file
                for file_name, docs in sources_by_file.items():
                    st.markdown(f"**üìÑ {file_name}** ({len(docs)} ƒëo·∫°n)")
                    for i, doc in enumerate(docs[:3]):  # Hi·ªÉn th·ªã t·ªëi ƒëa 3 ƒëo·∫°n m·ªói file
                        page_num = doc.metadata.get('page', 'N/A')
                        st.markdown(f"*Trang {page_num}:*")
                        st.text(doc.page_content[:300] + "..." if len(doc.page_content) > 300 else doc.page_content)
                        if i < len(docs[:3]) - 1:
                            st.markdown("---")

    except Exception as e:
        st.error(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")
        st.info("üí° H√£y ki·ªÉm tra l·∫°i c·∫•u h√¨nh API key ho·∫∑c th·ª≠ s·ª≠ d·ª•ng model kh√°c")

# Statistics v√† information
st.markdown("---")
col1, col2, col3 = st.columns(3)

with col1:
    st.metric(
        label="üìÑ T·ªïng t√†i li·ªáu", 
        value=len(documents),
        help="S·ªë l∆∞·ª£ng file PDF ƒë√£ upload"
    )

with col2:
    st.metric(
        label="‚úÖ ƒê√£ x·ª≠ l√Ω", 
        value=len(processed_docs),
        help="S·ªë t√†i li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫°o vector store"
    )

with col3:
    total_size = sum([d['size_mb'] for d in documents])
    st.metric(
        label="üíæ T·ªïng dung l∆∞·ª£ng", 
        value=f"{total_size:.1f} MB",
        help="T·ªïng dung l∆∞·ª£ng c√°c file PDF"
    )

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center'>
        <p><small>üöÄ H·ªá th·ªëng Chatbot RAG Multi-Document - Developed with ‚ù§Ô∏è</small></p>
        <p><small>üìÅ Qu·∫£n l√Ω nhi·ªÅu t√†i li·ªáu | üîç T√¨m ki·∫øm th√¥ng minh | üì§ Upload d·ªÖ d√†ng</small></p>
    </div>
    """,
    unsafe_allow_html=True
)
